@model GroceryShopSystem.Models.Product

@{
    ViewData["Title"] = "Product Details";
}

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="card shadow-lg border-0 rounded-3">
                <div class="row g-0">
                    <!-- Product Image -->
                    <div class="col-md-5">
                        <img src="@(string.IsNullOrEmpty(Model.ImageUrl)
                                                                 ? "https://tse2.mm.bing.net/th/id/OIP.rteg3kSP5SZxJp1xbRe-0AHaHa?w=626&h=626&rs=1&pid=ImgDetMain&o=7&rm=3"
                                                                 : Model.ImageUrl)"
                             class="img-fluid rounded-start"
                             alt="@Model.Title"
                             style="height:100%; object-fit:cover;"
                             onerror="this.onerror=null; this.src='https://tse2.mm.bing.net/th/id/OIP.rteg3kSP5SZxJp1xbRe-0AHaHa?w=626&h=626&rs=1&pid=ImgDetMain&o=7&rm=3';">
                    </div>

                    <!-- Product Details -->
                    <div class="col-md-7">
                        <div class="card-body p-4">
                            <h2 class="card-title mb-3">@Model.Title</h2>
                            <p class="text-muted mb-1">
                                <strong>Category:</strong> @Model.Category.Title
                            </p>
                            <p class="card-text mb-3">@Model.Description</p>
                            <h4 class="text-success mb-4">$@Model.Price</h4>

                            <p><strong>Available Quantity:</strong> @Model.Quantity</p>

                            @* <p>
                                <span class="badge bg-@(Model.IsActive ? "success" : "danger")">
                                    @(Model.IsActive ? "Available" : "Out of Stock!")
                                </span>
                            </p> *@

                            <div class="d-flex gap-3 mt-4">
                                <a asp-controller="Home" asp-action="Index" class="btn btn-secondary">
                                    <i class="bi bi-arrow-left"></i> Back to List
                                </a>
                                <!-- Add to Cart POST form -->
                                @if (User.Identity.IsAuthenticated)
                                {
                                    <form asp-area="Customer" asp-controller="Cart" asp-action="Add" method="post" class="d-inline">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="productId" value="@Model.Id" />
                                        <input type="hidden" name="quantity" value="1" />
                                        <button type="button" class="btn btn-primary btn-sm add-to-cart-btn" data-productid="@Model.Id">
                                            <i class="bi bi-cart-plus"></i> Add
                                        </button>
                                    </form>
                                }
                                else
                                {
                                    <a asp-area="" asp-controller="Account" asp-action="Login" class="btn btn-danger btn-sm">
                                        <i class="bi bi-box-arrow-in-right"></i> Login to Add
                                    </a>
                                }
                            </div>

                            <hr class="my-4">
                            <p class="text-muted small mb-0">
                                Created: @Model.CreatedAt.ToString("MMM dd, yyyy") | Updated: @Model.UpdatedAt.ToString("MMM dd, yyyy")
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1055;">
    <div id="cart-toast" class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                Item added to cart!
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>
<script>
        document.addEventListener("DOMContentLoaded", () => {
        const toastEl = document.getElementById('cart-toast');
        const toast = new bootstrap.Toast(toastEl);

        document.querySelectorAll('.add-to-cart-btn').forEach(btn => {
            btn.addEventListener('click', async () => {
                const productId = btn.dataset.productid;
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                try {
                    const response = await fetch('/Customer/Cart/Add', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded'
                        },
                        body: `__RequestVerificationToken=${encodeURIComponent(token)}&productId=${productId}&quantity=1`
                    });

                    if (response.ok) {
                        toastEl.querySelector('.toast-body').textContent = "Item added to cart!";
                        toast.show();
                    } else {
                        const result = await response.json();
                        toastEl.classList.remove('bg-success');
                        toastEl.classList.add('bg-danger');
                        toastEl.querySelector('.toast-body').textContent = result.message || "Failed to add item.";
                        toast.show();
                    }
                } catch (err) {
                    toastEl.classList.remove('bg-success');
                    toastEl.classList.add('bg-danger');
                    toastEl.querySelector('.toast-body').textContent = "Error adding item.";
                    toast.show();
                }
            });
        });
    });
</script>
